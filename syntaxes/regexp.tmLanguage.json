{
	"$schema": "https://raw.githubusercontent.com/RedCMD/TmLanguage-Syntax-Highlighter/main/vscode.tmLanguage.schema.json",
	"comment": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions https://github.com/wraith13/vscode-schemas/blob/master/en/latest/schemas/language-configuration.json#L237-L258",
	"name": "JSON escaped JavaScript Regexp. package.json, language-configuration.json & task.json",
	"scopeName": "source.json.regexp",
	"injectionSelector": [
		"L:source.json.embedded .meta.embedded.patternProperties. meta.structure.dictionary.json support.type.property-name.json -(.meta.embedded.patternProperties. meta.structure.dictionary.json meta.structure.dictionary.json) -(.meta.embedded.patternProperties. meta.structure.array.json) -meta.embedded.json.regexp -comment",
		"L:source.json.embedded .meta.embedded.pattern. string.quoted.double.json -(.meta.embedded.pattern. meta.structure.dictionary.json) -(.meta.embedded.pattern. meta.structure.array.json) -meta.embedded.json.regexp -comment",
		"L:source.json.embedded .meta.embedded.contributes. .meta.embedded.languages. meta.structure.array.json .meta.embedded.firstLine. string.quoted.double.json -(meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json) -(meta.structure.array.json meta.structure.array.json) -meta.embedded.json.regexp -comment",
		"L:source.json.embedded .meta.embedded.contributes. .meta.embedded.problemMatchers. meta.structure.array.json .meta.embedded.background. (.meta.embedded.beginsPattern. | .meta.embedded.endsPattern.) (string.quoted.double.json -(meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json) | .meta.embedded.regexp. string.quoted.double.json -(meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json)) -(meta.structure.array.json meta.structure.array.json) -meta.embedded.json.regexp -comment",
		"L:source.json.embedded .meta.embedded.contributes. .meta.embedded.problemMatchers. meta.structure.array.json .meta.embedded.pattern. meta.structure.array.json .meta.embedded.regexp. string.quoted.double.json -(meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json) -(meta.structure.array.json meta.structure.array.json meta.structure.array.json) -meta.embedded.json.regexp -comment",
		"L:source.json.embedded .meta.embedded.contributes. .meta.embedded.problemMatchers. meta.structure.array.json .meta.embedded.pattern. .meta.embedded.regexp. string.quoted.double.json -(meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json) -(meta.structure.array.json meta.structure.array.json) -meta.embedded.json.regexp -comment",
		"L:source.json.embedded .meta.embedded.contributes. .meta.embedded.problemPatterns. meta.structure.array.json .meta.embedded.patterns. meta.structure.array.json .meta.embedded.regexp. string.quoted.double.json -(meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json) -(meta.structure.array.json meta.structure.array.json meta.structure.array.json) -meta.embedded.json.regexp -comment",
		"L:source.json.embedded .meta.embedded.contributes. .meta.embedded.problemPatterns. meta.structure.array.json .meta.embedded.regexp. string.quoted.double.json -(meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json) -(meta.structure.array.json meta.structure.array.json) -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.wordPattern. (.meta.embedded.pattern. -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) | -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments)) meta.structure.dictionary.value.json.comments string.quoted.double.json.comments -meta.structure.array.json.comments -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.folding. .meta.embedded.markers. (.meta.embedded.start. | .meta.embedded.end.) meta.structure.dictionary.value.json.comments string.quoted.double.json.comments -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) -meta.structure.array.json.comments -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.onEnterRules. meta.structure.array.json.comments (.meta.embedded.afterText. | .meta.embedded.beforeText. | .meta.embedded.previousLineText.) (.meta.embedded.pattern. -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) | -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments)) meta.structure.dictionary.value.json.comments string.quoted.double.json.comments -(meta.structure.array.json.comments meta.structure.array.json.comments) -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.indentationRules. (.meta.embedded.decreaseIndentPattern. | .meta.embedded.increaseIndentPattern. | .meta.embedded.unIndentedLinePattern. | .meta.embedded.indentNextLinePattern.) (.meta.embedded.pattern. -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) | -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments)) meta.structure.dictionary.value.json.comments string.quoted.double.json.comments -meta.structure.array.json.comments -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.tasks. meta.structure.array.json.comments .meta.embedded.problemMatcher. .meta.embedded.background. (.meta.embedded.beginsPattern. | .meta.embedded.endsPattern.) (string.quoted.double.json.comments -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) | .meta.embedded.regexp. string.quoted.double.json.comments -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments)) -(meta.structure.array.json.comments meta.structure.array.json.comments meta.structure.array.json.comments) -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.tasks. meta.structure.array.json.comments .meta.embedded.problemMatcher. .meta.embedded.pattern. meta.structure.array.json.comments .meta.embedded.regexp. string.quoted.double.json.comments -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) -(meta.structure.array.json.comments meta.structure.array.json.comments meta.structure.array.json.comments meta.structure.array.json.comments) -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.tasks. meta.structure.array.json.comments .meta.embedded.problemMatcher. .meta.embedded.pattern. .meta.embedded.regexp. string.quoted.double.json.comments -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) -(meta.structure.array.json.comments meta.structure.array.json.comments meta.structure.array.json.comments) -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.problemMatcher. .meta.embedded.background. (.meta.embedded.beginsPattern. | .meta.embedded.endsPattern.) (string.quoted.double.json.comments -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) | .meta.embedded.regexp. string.quoted.double.json.comments -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments)) -(meta.structure.array.json.comments meta.structure.array.json.comments) -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.problemMatcher. .meta.embedded.pattern. meta.structure.array.json.comments .meta.embedded.regexp. string.quoted.double.json.comments -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) -(meta.structure.array.json.comments meta.structure.array.json.comments meta.structure.array.json.comments) -meta.embedded.json.regexp -comment",
		"L:source.json.comments.embedded .meta.embedded.problemMatcher. .meta.embedded.pattern. .meta.embedded.regexp. string.quoted.double.json.comments -(meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments meta.structure.dictionary.json.comments) -(meta.structure.array.json.comments meta.structure.array.json.comments) -meta.embedded.json.regexp -comment"
	],
	"patterns": [
		{ "include": "#regex" }
	],
	"repository": {
		"regex": {
			"begin": "(?<=\")\\G(?=(?>[^\\x00-\\x1F\"\\\\]++|\\\\.)++\")",
			"end": "(?=\")|$",
			"name": "meta.embedded.json.regexp",
			"contentName": "string.regexp.json",
			"patterns": [ { "include": "#regexp" } ]
		},
		"regexp": {
			"patterns": [
				{
					"match": "\\\\{2}[bB]|\\^|\\$",
					"name": "keyword.control.anchor.regexp.json"
				},
				{
					"match": "\\\\{2}([1-9][0-9]*)",
					"captures": {
						"0": { "name": "keyword.other.back-reference.regexp.json" },
						"1": { "name": "constant.numeric.regexp.json" }
					}
				},
				{
					"begin": "\\\\{2}k<?",
					"end": ">|(?=\")|$",
					"name": "keyword.other.back-reference.regexp.json",
					"patterns": [
						{
							"match": "[$A-Z_a-z][$0-9A-Z_a-z]*",
							"name": "variable.other.regexp.json"
						},
						{ "include": "source.json#stringcontent" }
					]
				},
				{
					"match": "\\G(?>[*+?]|{(?>\\d+,?\\d*|,\\d+)}\\??)",
					"name": "invalid.illegal.keyword.operator.quantifier.regexp.json"
				},
				{
					"match": "[*+?]|{(?>\\d+,?\\d*|,\\d+)}\\??",
					"name": "keyword.operator.quantifier.regexp.json"
				},
				{
					"match": "\\|",
					"name": "keyword.operator.or.regexp.json"
				},
				{
					"match": "\\.",
					"name": "constant.character.class.regexp.json"
				},
				{
					"begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
					"end": "\\)|(?=\")|$",
					"beginCaptures": {
						"1": { "name": "punctuation.definition.group.regexp.json" },
						"2": { "name": "punctuation.definition.group.assertion.regexp.json" },
						"3": { "name": "meta.assertion.look-ahead.regexp.json" },
						"4": { "name": "meta.assertion.negative-look-ahead.regexp.json" },
						"5": { "name": "meta.assertion.look-behind.regexp.json" },
						"6": { "name": "meta.assertion.negative-look-behind.regexp.json" }
					},
					"endCaptures": { "0": { "name": "punctuation.definition.group.regexp.json" } },
					"name": "meta.embedded.group.assertion.regexp.json",
					"contentName": "string.regexp.json",
					"patterns": [ { "include": "#regexp" } ]
				},
				{
					"begin": "\\((?>(\\?([ims-]*):)|\\?<([a-zA-Z_$][\\w$]*)>)?",
					"end": "\\)|(?=\")|$",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.group.regexp.json" },
						"1": { "name": "punctuation.definition.group.no-capture.regexp.json" },
						"2": { "name": "keyword.other.flags.regexp.json" },
						"3": { "name": "variable.other.regexp.json" }
					},
					"endCaptures": { "0": { "name": "punctuation.definition.group.regexp.json" } },
					"name": "meta.embedded.group.regexp.json",
					"contentName": "string.regexp.json",
					"patterns": [ { "include": "#regexp" } ]
				},
				{
					"begin": "(\\[)(\\^)?",
					"end": "]|(?=\")|$",
					"beginCaptures": {
						"1": { "name": "punctuation.definition.character-class.regexp.json" },
						"2": { "name": "keyword.operator.negation.regexp.json" }
					},
					"endCaptures": { "0": { "name": "punctuation.definition.character-class.regexp.json" } },
					"name": "meta.embedded.character-class.regexp.json",
					"contentName": "constant.other.character-class.set.regexp.regex.json",
					"patterns": [
						{
							"match": "[0-9]-[0-9]",
							"name": "constant.numeric.character-class.range.regexp.json"
						},
						{
							"match": "[a-z]-[a-z]|[A-Z]-[A-Z]",
							"name": "variable.other.constant.character-class.range.regexp.json"
						},
						{
							"match": "(?:(\\\\{2}(?>[0-7]{3}|x\\h{2}|u\\h{4}))|(\\\\{2}c[A-Z])|(\\\\{4}|\\\\{1,2}[^\\\\wWsSdD])|.)-(?:(\\\\{2}(?:[0-7]{3}|x\\h{2}|u\\h{4}))|(\\\\{2}c[A-Z])|(\\\\{4}|\\\\{1,2}[^\\\\wWsSdD])|[^]])",
							"captures": {
								"0": { "name": "support.class.range.regex.json" },
								"1": { "name": "constant.character.numeric.regexp.json" },
								"2": { "name": "constant.character.control.regexp.json" },
								"3": { "name": "constant.character.escape.backslash.regexp.json" },
								"4": { "name": "constant.character.numeric.regexp.json" },
								"5": { "name": "constant.character.control.regexp.json" },
								"6": { "name": "constant.character.escape.backslash.regexp.json" }
							},
							"name": "constant.other.character-class.range.regexp.json"
						},
						{ "include": "#regex-character-class" }
					]
				},
				{ "include": "#regex-character-class" }
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"match": "\\\\{2}(?>[0-7]{3}|x\\h{2}|u\\h{4})",
					"name": "constant.character.numeric.regexp.json"
				},
				{
					"match": "\\\\{2}[wWsSdD]",
					"name": "constant.character.class.regexp.json"
				},
				{
					"match": "\\\\{2}[trnvfb0]",
					"name": "constant.character.escape.character.regexp.json"
				},
				{
					"match": "\\\\{2}c[A-Z]",
					"name": "constant.character.control.regexp.json"
				},
				{
					"match": "(\\\\{3})\\\\",
					"captures": { "1": { "name": "constant.character.escape.backslash.regex.regexp.json" } }
				},
				{ "include": "#unicode" },
				{
					"match": "(\\\\{2})[^\\\\\"]",
					"captures": { "1": { "name": "constant.character.escape.backslash.regex.regexp.json" } }
				},
				{ "include": "source.json#stringcontent" }
			]
		},
		"unicode": {
			"patterns": [
				{
					"match": "\\\\{2}u{(0*\\h{4,5})}",
					"captures": {
						"0": { "name": "constant.character.numeric.regexp.json" },
						"1": { "name": "constant.numeric.regexp.json" }
					}
				},
				{
					"begin": "\\\\{2}[pP]{",
					"end": "}|(?=\")|$",
					"name": "constant.character.numeric.regexp.json",
					"patterns": [
						{
							"match": "(?<==)[a-zA-Z0-9_]+",
							"name": "variable.other.regexp.json"
						},
						{
							"match": "[a-zA-Z_]+",
							"name": "variable.other.constant.regexp.json"
						},
						{ "include": "source.json#stringcontent" }
					]
				}
			]
		}
	}
}
