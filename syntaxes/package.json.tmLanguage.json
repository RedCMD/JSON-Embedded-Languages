{
	"$schema": "https://raw.githubusercontent.com/RedCMD/TmLanguage-Syntax-Highlighter/main/vscode.tmLanguage.schema.json",
	"name": "package.json",
	"scopeName": "source.json.package",
	"injectionSelector": "L:source.json meta.structure.dictionary.json -meta.structure.dictionary.value.json -meta.structure.array.json -string -comment",
	"patterns": [
		{ "include": "#scripts" }
	],
	"repository": {
		"scripts": {
			"begin": "(?!\\G)(?<=\"scripts\")(?!})",
			"end": "(?<=,)|(?=})",
			"patterns": [
				{
					"comment": "the JSON object key",
					"include": "source.json#objectkey"
				},
				{ "include": "source.json#comments" },
				{
					"comment": "Taken straight from `source.json`",
					"begin": ":",
					"beginCaptures": { "0": { "name": "punctuation.separator.dictionary.key-value.json" } },
					"end": "(,)|(?=\\})",
					"endCaptures": { "1": { "name": "punctuation.separator.dictionary.pair.json" } },
					"name": "meta.structure.dictionary.value.json",
					"patterns": [
						{
							"begin": "\\{",
							"beginCaptures": { "0": { "name": "punctuation.definition.dictionary.begin.json" } },
							"end": "\\}",
							"endCaptures": { "0": { "name": "punctuation.definition.dictionary.end.json" } },
							"name": "meta.structure.dictionary.json",
							"patterns": [
								{
									"comment": "the JSON object key",
									"include": "source.json#objectkey"
								},
								{ "include": "source.json#comments" },
								{
									"begin": ":",
									"beginCaptures": { "0": { "name": "punctuation.separator.dictionary.key-value.json" } },
									"end": "(,)|(?=\\})",
									"endCaptures": { "1": { "name": "punctuation.separator.dictionary.pair.json" } },
									"name": "meta.structure.dictionary.value.json",
									"patterns": [
										{
											"comment": "VSCode TextMate bug. For some reason, including a grammar from within a capture group doesn't load the include. We have to pre-load the include outside of a capture group. `source.shell`",
											"begin": "(*FAIL)",
											"end": "|",
											"patterns": [ { "include": "source.shell" } ]
										},
										{
											"match": "(\")((?>[^\\\\\"]++|\\\\.)++)(\")",
											"captures": {
												"0": { "name": "string.quoted.double.json" },
												"1": { "name": "punctuation.definition.string.begin.json.package" },
												"2": {
													"name": "meta.embedded.shellscript.json.package",
													"patterns": [
														{
															"comment": "Setup a `\\G` anchor for ShellScript to use",
															"begin": "|",
															"end": "(*FAIL)",
															"patterns": [
																{ "include": "source.shell" },
																{
																	"begin": "(?!^[ \\t]*+$)(?:(?<=^until | until |\\tuntil |^while | while |\\twhile |^elif | elif |\\telif |^else | else |\\telse |^then | then |\\tthen |^do | do |\\tdo |^if | if |\\tif )|(?<=\"\\G|^|;|\\||&|!|\\(|\\{|`))[ \\t]*+(?!nocorrect\\W|nocorrect\\$|function\\W|function\\$|foreach\\W|foreach\\$|repeat\\W|repeat\\$|logout\\W|logout\\$|coproc\\W|coproc\\$|select\\W|select\\$|while\\W|while\\$|pushd\\W|pushd\\$|until\\W|until\\$|case\\W|case\\$|done\\W|done\\$|elif\\W|elif\\$|else\\W|else\\$|esac\\W|esac\\$|popd\\W|popd\\$|then\\W|then\\$|time\\W|time\\$|for\\W|for\\$|end\\W|end\\$|fi\\W|fi\\$|do\\W|do\\$|in\\W|in\\$|if\\W|if\\$)",
																	"end": "(?=;|\\||&|\\n|\\)|`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)",
																	"beginCaptures": { },
																	"endCaptures": { },
																	"name": "meta.statement.shell",
																	"patterns": [ { "include": "source.shell#typical_statements" } ]
																}
															]
														},
														{ "include": "source.json#stringcontent" }
													]
												},
												"3": { "name": "punctuation.definition.string.end.json.package" }
											}
										},
										{
											"comment": "the JSON object value",
											"include": "source.json#value"
										},
										{
											"match": "[^\\s,]",
											"name": "invalid.illegal.expected-dictionary-separator.json"
										}
									]
								},
								{
									"match": "[^\\s\\}]",
									"name": "invalid.illegal.expected-dictionary-separator.json"
								}
							]
						},
						{
							"comment": "the JSON object value",
							"include": "source.json#value"
						},
						{
							"match": "[^\\s,]",
							"name": "invalid.illegal.expected-dictionary-separator.json"
						}
					]
				},
				{
					"match": "[^\\s\\}]",
					"name": "invalid.illegal.expected-dictionary-separator.json"
				}
			]
		}
	}
}